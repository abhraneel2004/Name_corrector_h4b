{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file://D%3A/00_WorkSpace/Hackathon/h4b_online2/name_corrector/src/ai/ai-instance.ts"],"sourcesContent":["import {genkit} from 'genkit';\r\nimport {googleAI} from '@genkit-ai/googleai';\r\n\r\nexport const ai = genkit({\r\n  promptDir: './prompts',\r\n  plugins: [\r\n    googleAI({\r\n      apiKey: process.env.GOOGLE_GENAI_API_KEY,\r\n    }),\r\n  ],\r\n  model: 'googleai/gemini-2.0-flash',\r\n});\r\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,WAAW;IACX,SAAS;QACP,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD,EAAE;YACP,QAAQ,QAAQ,GAAG,CAAC,oBAAoB;QAC1C;KACD;IACD,OAAO;AACT","debugId":null}},
    {"offset": {"line": 239, "column": 0}, "map": {"version":3,"sources":["file://D%3A/00_WorkSpace/Hackathon/h4b_online2/name_corrector/src/services/indian-name-validator.ts"],"sourcesContent":["/**\r\n * Represents information about a name, including its validity.\r\n */\r\nexport interface NameInfo {\r\n  /**\r\n   * Indicates whether the name is valid or not.\r\n   */\r\n  isValid: boolean;\r\n  /**\r\n   * An optional message providing additional information about the name.\r\n   */\r\n  message?: string;\r\n}\r\n\r\n/**\r\n * Asynchronously validates an Indian name.\r\n *\r\n * @param name The name to validate.\r\n * @returns A promise that resolves to a NameInfo object indicating whether the name is valid and providing an optional message.\r\n */\r\nexport async function validateIndianName(name: string): Promise<NameInfo> {\r\n  // TODO: Implement this by calling an API.\r\n\r\n  return {\r\n    isValid: true,\r\n    message: 'The name is valid.',\r\n  };\r\n}\r\n"],"names":[],"mappings":"AAAA;;CAEC;;;AAkBM,eAAe,mBAAmB,IAAY;IACnD,0CAA0C;IAE1C,OAAO;QACL,SAAS;QACT,SAAS;IACX;AACF","debugId":null}},
    {"offset": {"line": 257, "column": 0}, "map": {"version":3,"sources":["file://D%3A/00_WorkSpace/Hackathon/h4b_online2/name_corrector/src/ai/flows/audit-data-for-indian-names.ts"],"sourcesContent":["// Audit Indian names in a dataset.\r\n\r\n'use server';\r\n\r\nimport {ai} from '@/ai/ai-instance';\r\nimport {validateIndianName} from '@/services/indian-name-validator';\r\nimport {z} from 'genkit';\r\n\r\nconst AuditDataForIndianNamesInputSchema = z.object({\r\n  data: z\r\n    .array(z.record(z.string()))\r\n    .describe('An array of data records, where each record is a map of string to string.'),\r\n});\r\nexport type AuditDataForIndianNamesInput = z.infer<typeof AuditDataForIndianNamesInputSchema>;\r\n\r\nconst AuditDataForIndianNamesOutputSchema = z.object({\r\n  anomalies: z.array(\r\n    z.object({\r\n      row: z.number().describe('The row number where the anomaly was found.'),\r\n      column: z.string().describe('The column name where the anomaly was found.'),\r\n      value: z.string().describe('The value that was flagged as an anomaly.'),\r\n      message: z.string().describe('The reason why the value was flagged as an anomaly.'),\r\n    })\r\n  ),\r\n});\r\nexport type AuditDataForIndianNamesOutput = z.infer<typeof AuditDataForIndianNamesOutputSchema>;\r\n\r\nexport async function auditDataForIndianNames(\r\n  input: AuditDataForIndianNamesInput\r\n): Promise<AuditDataForIndianNamesOutput> {\r\n  return auditDataForIndianNamesFlow(input);\r\n}\r\n\r\nconst auditDataForIndianNamesFlow = ai.defineFlow(\r\n  {\r\n    name: 'auditDataForIndianNamesFlow',\r\n    inputSchema: AuditDataForIndianNamesInputSchema,\r\n    outputSchema: AuditDataForIndianNamesOutputSchema,\r\n  },\r\n  async input => {\r\n    const anomalies: AuditDataForIndianNamesOutput['anomalies'] = [];\r\n\r\n    for (let i = 0; i < input.data.length; i++) {\r\n      const row = input.data[i];\r\n      for (const column in row) {\r\n        if (Object.prototype.hasOwnProperty.call(row, column)) {\r\n          const value = row[column];\r\n          const nameInfo = await validateIndianName(value);\r\n          if (!nameInfo.isValid) {\r\n            anomalies.push({\r\n              row: i + 1,\r\n              column: column,\r\n              value: value,\r\n              message: nameInfo.message || 'The value is potentially not a valid Indian name.',\r\n            });\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return {anomalies};\r\n  }\r\n);\r\n"],"names":[],"mappings":"AAAA,mCAAmC;;;;;;AAInC;AACA;AACA;AAAA;;;;;;;AAEA,MAAM,qCAAqC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAClD,MAAM,uIAAA,CAAA,IAAC,CACJ,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,KACvB,QAAQ,CAAC;AACd;AAGA,MAAM,sCAAsC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACnD,WAAW,uIAAA,CAAA,IAAC,CAAC,KAAK,CAChB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACP,KAAK,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QACzB,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC5B,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC3B,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC/B;AAEJ;AAGO,eAAe,uCAAqB,GAArB,wBACpB,KAAmC;IAEnC,OAAO,4BAA4B;AACrC;AAEA,MAAM,8BAA8B,2HAAA,CAAA,KAAE,CAAC,UAAU,CAC/C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,YAAwD,EAAE;IAEhE,IAAK,IAAI,IAAI,GAAG,IAAI,MAAM,IAAI,CAAC,MAAM,EAAE,IAAK;QAC1C,MAAM,MAAM,MAAM,IAAI,CAAC,EAAE;QACzB,IAAK,MAAM,UAAU,IAAK;YACxB,IAAI,OAAO,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,SAAS;gBACrD,MAAM,QAAQ,GAAG,CAAC,OAAO;gBACzB,MAAM,WAAW,MAAM,CAAA,GAAA,8IAAA,CAAA,qBAAkB,AAAD,EAAE;gBAC1C,IAAI,CAAC,SAAS,OAAO,EAAE;oBACrB,UAAU,IAAI,CAAC;wBACb,KAAK,IAAI;wBACT,QAAQ;wBACR,OAAO;wBACP,SAAS,SAAS,OAAO,IAAI;oBAC/B;gBACF;YACF;QACF;IACF;IAEA,OAAO;QAAC;IAAS;AACnB;;;IAlCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 325, "column": 0}, "map": {"version":3,"sources":["file://D%3A/00_WorkSpace/Hackathon/h4b_online2/name_corrector/src/ai/flows/provide-data-audit-summary.ts"],"sourcesContent":["'use server';\r\n/**\r\n * @fileOverview Summarizes potential data quality issues after an audit.\r\n *\r\n * - provideDataAuditSummary - A function that provides a textual summary of potential data issues.\r\n * - ProvideDataAuditSummaryInput - The input type for the provideDataAuditSummary function.\r\n * - ProvideDataAuditSummaryOutput - The return type for the provideDataAuditSummary function.\r\n */\r\n\r\nimport {ai} from '@/ai/ai-instance';\r\nimport {z} from 'genkit';\r\n\r\nconst ProvideDataAuditSummaryInputSchema = z.object({\r\n  auditResults: z.string().describe('The detailed results from the data audit.'),\r\n});\r\nexport type ProvideDataAuditSummaryInput = z.infer<typeof ProvideDataAuditSummaryInputSchema>;\r\n\r\nconst ProvideDataAuditSummaryOutputSchema = z.object({\r\n  summary: z.string().describe('A textual summary of the potential data quality issues.'),\r\n});\r\nexport type ProvideDataAuditSummaryOutput = z.infer<typeof ProvideDataAuditSummaryOutputSchema>;\r\n\r\nexport async function provideDataAuditSummary(input: ProvideDataAuditSummaryInput): Promise<ProvideDataAuditSummaryOutput> {\r\n  return provideDataAuditSummaryFlow(input);\r\n}\r\n\r\nconst prompt = ai.definePrompt({\r\n  name: 'provideDataAuditSummaryPrompt',\r\n  input: {\r\n    schema: z.object({\r\n      auditResults: z.string().describe('The detailed results from the data audit.'),\r\n    }),\r\n  },\r\n  output: {\r\n    schema: z.object({\r\n      summary: z.string().describe('A textual summary of the potential data quality issues.'),\r\n    }),\r\n  },\r\n  prompt: `You are an AI assistant who summarizes data audit results.\r\n\r\n  Given the following data audit results, provide a concise textual summary of the potential data quality issues identified. Focus on the key findings and potential implications for data accuracy and reliability.\r\n  \\n  Audit Results: {{{auditResults}}}\r\n  \\n  Summary: `,\r\n});\r\n\r\nconst provideDataAuditSummaryFlow = ai.defineFlow<\r\n  typeof ProvideDataAuditSummaryInputSchema,\r\n  typeof ProvideDataAuditSummaryOutputSchema\r\n>(\r\n  {\r\n    name: 'provideDataAuditSummaryFlow',\r\n    inputSchema: ProvideDataAuditSummaryInputSchema,\r\n    outputSchema: ProvideDataAuditSummaryOutputSchema,\r\n  },\r\n  async input => {\r\n    const {output} = await prompt(input);\r\n    return output!;\r\n  }\r\n);\r\n"],"names":[],"mappings":";;;;;AACA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,qCAAqC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAClD,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACpC;AAGA,MAAM,sCAAsC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACnD,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC/B;AAGO,eAAe,uCAAqB,GAArB,wBAAwB,KAAmC;IAC/E,OAAO,4BAA4B;AACrC;AAEA,MAAM,SAAS,2HAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QACL,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YACf,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QACpC;IACF;IACA,QAAQ;QACN,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YACf,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC/B;IACF;IACA,QAAQ,CAAC;;;;eAII,CAAC;AAChB;AAEA,MAAM,8BAA8B,2HAAA,CAAA,KAAE,CAAC,UAAU,CAI/C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IAnCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 390, "column": 0}, "map": {"version":3,"sources":["file://D%3A/00_WorkSpace/Hackathon/h4b_online2/name_corrector/src/ai/flows/suggest-data-corrections.ts"],"sourcesContent":["'use server';\r\n/**\r\n * @fileOverview This file defines a Genkit flow for suggesting data corrections based on identified anomalies and inconsistencies in a dataset.\r\n *\r\n * - suggestDataCorrections - A function that initiates the data correction suggestion process.\r\n * - SuggestDataCorrectionsInput - The input type for the suggestDataCorrections function, including the data and audit results.\r\n * - SuggestDataCorrectionsOutput - The return type for the suggestDataCorrections function, providing suggestions for data cleaning and validation.\r\n */\r\n\r\nimport {ai} from '@/ai/ai-instance';\r\nimport {z} from 'genkit';\r\n\r\nconst SuggestDataCorrectionsInputSchema = z.object({\r\n  data: z.string().describe('The dataset to be audited, in string format (e.g., CSV or JSON).'),\r\n  auditResults: z.string().describe('The audit results from the AI data audit, highlighting anomalies and inconsistencies.'),\r\n});\r\nexport type SuggestDataCorrectionsInput = z.infer<typeof SuggestDataCorrectionsInputSchema>;\r\n\r\nconst SuggestDataCorrectionsOutputSchema = z.object({\r\n  suggestions: z.string().describe('Suggestions for data cleaning and validation, based on the audit results.'),\r\n});\r\nexport type SuggestDataCorrectionsOutput = z.infer<typeof SuggestDataCorrectionsOutputSchema>;\r\n\r\nexport async function suggestDataCorrections(input: SuggestDataCorrectionsInput): Promise<SuggestDataCorrectionsOutput> {\r\n  return suggestDataCorrectionsFlow(input);\r\n}\r\n\r\nconst prompt = ai.definePrompt({\r\n  name: 'suggestDataCorrectionsPrompt',\r\n  input: {\r\n    schema: z.object({\r\n      data: z.string().describe('The dataset to be audited.'),\r\n      auditResults: z.string().describe('The audit results from the AI data audit.'),\r\n    }),\r\n  },\r\n  output: {\r\n    schema: z.object({\r\n      suggestions: z.string().describe('Suggestions for data cleaning and validation.'),\r\n    }),\r\n  },\r\n  prompt: `You are an AI assistant specialized in data quality.\r\n\r\nYou have audited the following dataset and have identified some issues.\r\nBased on the data and audit results, suggest data cleaning and validation steps to improve data quality.\r\n\r\nDataset:\r\n{{{data}}}\r\n\r\nAudit Results:\r\n{{{auditResults}}}\r\n\r\nSuggestions:\r\n`, // Add data and auditResults to the prompot.\r\n});\r\n\r\nconst suggestDataCorrectionsFlow = ai.defineFlow<\r\n  typeof SuggestDataCorrectionsInputSchema,\r\n  typeof SuggestDataCorrectionsOutputSchema\r\n>(\r\n  {\r\n    name: 'suggestDataCorrectionsFlow',\r\n    inputSchema: SuggestDataCorrectionsInputSchema,\r\n    outputSchema: SuggestDataCorrectionsOutputSchema,\r\n  },\r\n  async input => {\r\n    const {output} = await prompt(input);\r\n    return output!;\r\n  }\r\n);\r\n"],"names":[],"mappings":";;;;;AACA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,oCAAoC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACjD,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC1B,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACpC;AAGA,MAAM,qCAAqC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAClD,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACnC;AAGO,eAAe,uCAAoB,GAApB,uBAAuB,KAAkC;IAC7E,OAAO,2BAA2B;AACpC;AAEA,MAAM,SAAS,2HAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QACL,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YACf,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;YAC1B,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QACpC;IACF;IACA,QAAQ;QACN,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YACf,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QACnC;IACF;IACA,QAAQ,CAAC;;;;;;;;;;;;AAYX,CAAC;AACD;AAEA,MAAM,6BAA6B,2HAAA,CAAA,KAAE,CAAC,UAAU,CAI9C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IA5CoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 465, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 526, "column": 0}, "map": {"version":3,"sources":["file://D%3A/00_WorkSpace/Hackathon/h4b_online2/name_corrector/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 540, "column": 0}, "map": {"version":3,"sources":["file://D%3A/00_WorkSpace/Hackathon/h4b_online2/name_corrector/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgQ,GAC7R,8BACA","debugId":null}},
    {"offset": {"line": 554, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}