{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file://D%3A/00_WorkSpace/Hackathon/h4b_online2/name_corrector/src/ai/ai-instance.ts"],"sourcesContent":["import {genkit} from 'genkit';\r\nimport {googleAI} from '@genkit-ai/googleai';\r\n\r\nexport const ai = genkit({\r\n  promptDir: './prompts',\r\n  plugins: [\r\n    googleAI({\r\n      apiKey: process.env.GOOGLE_GENAI_API_KEY,\r\n    }),\r\n  ],\r\n  model: 'googleai/gemini-2.0-flash',\r\n});\r\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,WAAW;IACX,SAAS;QACP,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD,EAAE;YACP,QAAQ,QAAQ,GAAG,CAAC,oBAAoB;QAC1C;KACD;IACD,OAAO;AACT","debugId":null}},
    {"offset": {"line": 239, "column": 0}, "map": {"version":3,"sources":["file://D%3A/00_WorkSpace/Hackathon/h4b_online2/name_corrector/src/services/indian-name-validator.ts"],"sourcesContent":["/**\r\n * Represents information about a name, including its validity.\r\n */\r\nexport interface NameInfo {\r\n  /**\r\n   * Indicates whether the name is valid or not.\r\n   */\r\n  isValid: boolean;\r\n  /**\r\n   * An optional message providing additional information about the name.\r\n   */\r\n  message?: string;\r\n  /**\r\n   * An optional suggested correction for an invalid name.\r\n   */\r\n  suggestion?: string;\r\n}\r\n\r\n/**\r\n * Asynchronously validates an Indian name using Google's Generative AI.\r\n *\r\n * @param name The name to validate.\r\n * @returns A promise that resolves to a NameInfo object indicating whether the name is valid and providing suggestions if needed.\r\n */\r\nexport async function validateIndianName(name: string): Promise<NameInfo> {\r\n  // Skip validation for empty values\r\n  if (!name || name.trim() === '') {\r\n    return {\r\n      isValid: true,\r\n      message: 'Empty value, skipping validation.'\r\n    };\r\n  }\r\n  \r\n  try {\r\n    // Use the Google Gemini API\r\n    const GOOGLE_GENAI_API_KEY = process.env.GOOGLE_GENAI_API_KEY;\r\n    \r\n    if (!GOOGLE_GENAI_API_KEY) {\r\n      console.error('Google Gemini API key not found');\r\n      return {\r\n        isValid: true, // Assume valid if we can't check\r\n        message: 'Unable to validate: API key not configured.'\r\n      };\r\n    }\r\n    \r\n    const url = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro:generateContent';\r\n    \r\n    const response = await fetch(`${url}?key=${GOOGLE_GENAI_API_KEY}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        contents: [\r\n          {\r\n            parts: [\r\n              {\r\n                text: `Analyze if this is a valid Indian name: \"${name}\".\r\n                      If it's valid, respond with { \"isValid\": true, \"message\": \"Valid Indian name\" }\r\n                      If it's not valid, respond with { \"isValid\": false, \"message\": \"Brief explanation why it's not valid\", \"suggestion\": \"A corrected Indian name suggestion\" }\r\n                      Return only the JSON with no additional text.`\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        generationConfig: {\r\n          temperature: 0.1,\r\n          topK: 40,\r\n          topP: 0.95,\r\n          maxOutputTokens: 1024,\r\n        }\r\n      }),\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`API request failed with status ${response.status}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    \r\n    // Extract the text from the response\r\n    if (data.candidates && data.candidates[0] && data.candidates[0].content) {\r\n      const text = data.candidates[0].content.parts[0].text;\r\n      \r\n      try {\r\n        // Parse the JSON response from the LLM\r\n        const result = JSON.parse(text.trim());\r\n        return {\r\n          isValid: result.isValid,\r\n          message: result.message,\r\n          suggestion: result.suggestion\r\n        };\r\n      } catch (parseError) {\r\n        console.error('Failed to parse LLM response:', parseError);\r\n        return {\r\n          isValid: true, // Default to valid if we can't parse\r\n          message: 'Unable to validate: Error parsing response.'\r\n        };\r\n      }\r\n    }\r\n    \r\n    // Default response if we couldn't extract information\r\n    return {\r\n      isValid: true,\r\n      message: 'Unable to validate name properly.'\r\n    };\r\n  } catch (error) {\r\n    console.error('Error validating Indian name:', error);\r\n    // Default to valid in case of error to avoid blocking user workflow\r\n    return {\r\n      isValid: true,\r\n      message: 'Error during validation: ' + (error instanceof Error ? error.message : String(error))\r\n    };\r\n  }\r\n}\r\n"],"names":[],"mappings":"AAAA;;CAEC;;;AAsBM,eAAe,mBAAmB,IAAY;IACnD,mCAAmC;IACnC,IAAI,CAAC,QAAQ,KAAK,IAAI,OAAO,IAAI;QAC/B,OAAO;YACL,SAAS;YACT,SAAS;QACX;IACF;IAEA,IAAI;QACF,4BAA4B;QAC5B,MAAM,uBAAuB,QAAQ,GAAG,CAAC,oBAAoB;QAE7D,IAAI,CAAC,sBAAsB;YACzB,QAAQ,KAAK,CAAC;YACd,OAAO;gBACL,SAAS;gBACT,SAAS;YACX;QACF;QAEA,MAAM,MAAM;QAEZ,MAAM,WAAW,MAAM,MAAM,GAAG,IAAI,KAAK,EAAE,sBAAsB,EAAE;YACjE,QAAQ;YACR,SAAS;gBACP,gBAAgB;YAClB;YACA,MAAM,KAAK,SAAS,CAAC;gBACnB,UAAU;oBACR;wBACE,OAAO;4BACL;gCACE,MAAM,CAAC,yCAAyC,EAAE,KAAK;;;mEAGJ,CAAC;4BACtD;yBACD;oBACH;iBACD;gBACD,kBAAkB;oBAChB,aAAa;oBACb,MAAM;oBACN,MAAM;oBACN,iBAAiB;gBACnB;YACF;QACF;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,IAAI,MAAM,CAAC,+BAA+B,EAAE,SAAS,MAAM,EAAE;QACrE;QAEA,MAAM,OAAO,MAAM,SAAS,IAAI;QAEhC,qCAAqC;QACrC,IAAI,KAAK,UAAU,IAAI,KAAK,UAAU,CAAC,EAAE,IAAI,KAAK,UAAU,CAAC,EAAE,CAAC,OAAO,EAAE;YACvE,MAAM,OAAO,KAAK,UAAU,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI;YAErD,IAAI;gBACF,uCAAuC;gBACvC,MAAM,SAAS,KAAK,KAAK,CAAC,KAAK,IAAI;gBACnC,OAAO;oBACL,SAAS,OAAO,OAAO;oBACvB,SAAS,OAAO,OAAO;oBACvB,YAAY,OAAO,UAAU;gBAC/B;YACF,EAAE,OAAO,YAAY;gBACnB,QAAQ,KAAK,CAAC,iCAAiC;gBAC/C,OAAO;oBACL,SAAS;oBACT,SAAS;gBACX;YACF;QACF;QAEA,sDAAsD;QACtD,OAAO;YACL,SAAS;YACT,SAAS;QACX;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iCAAiC;QAC/C,oEAAoE;QACpE,OAAO;YACL,SAAS;YACT,SAAS,8BAA8B,CAAC,iBAAiB,QAAQ,MAAM,OAAO,GAAG,OAAO,MAAM;QAChG;IACF;AACF","debugId":null}},
    {"offset": {"line": 332, "column": 0}, "map": {"version":3,"sources":["file://D%3A/00_WorkSpace/Hackathon/h4b_online2/name_corrector/src/ai/flows/audit-data-for-indian-names.ts"],"sourcesContent":["// Audit Indian names in a dataset.\r\n\r\n'use server';\r\n\r\nimport {ai} from '@/ai/ai-instance';\r\nimport {validateIndianName} from '@/services/indian-name-validator';\r\nimport {z} from 'genkit';\r\n\r\nconst AuditDataForIndianNamesInputSchema = z.object({\r\n  data: z\r\n    .array(z.record(z.string()))\r\n    .describe('An array of data records, where each record is a map of string to string.'),\r\n});\r\nexport type AuditDataForIndianNamesInput = z.infer<typeof AuditDataForIndianNamesInputSchema>;\r\n\r\nconst AuditDataForIndianNamesOutputSchema = z.object({\r\n  anomalies: z.array(\r\n    z.object({\r\n      row: z.number().describe('The row number where the anomaly was found.'),\r\n      column: z.string().describe('The column name where the anomaly was found.'),\r\n      value: z.string().describe('The value that was flagged as an anomaly.'),\r\n      message: z.string().describe('The reason why the value was flagged as an anomaly.'),\r\n      suggestion: z.string().optional().describe('A suggested correction for the anomaly.'),\r\n    })\r\n  ),\r\n});\r\nexport type AuditDataForIndianNamesOutput = z.infer<typeof AuditDataForIndianNamesOutputSchema>;\r\n\r\nexport async function auditDataForIndianNames(\r\n  input: AuditDataForIndianNamesInput\r\n): Promise<AuditDataForIndianNamesOutput> {\r\n  return auditDataForIndianNamesFlow(input);\r\n}\r\n\r\nconst auditDataForIndianNamesFlow = ai.defineFlow(\r\n  {\r\n    name: 'auditDataForIndianNamesFlow',\r\n    inputSchema: AuditDataForIndianNamesInputSchema,\r\n    outputSchema: AuditDataForIndianNamesOutputSchema,\r\n  },\r\n  async input => {\r\n    const anomalies: AuditDataForIndianNamesOutput['anomalies'] = [];\r\n\r\n    for (let i = 0; i < input.data.length; i++) {\r\n      const row = input.data[i];\r\n      \r\n      // Only check name columns\r\n      const nameColumns = ['Accused First Name', 'Accused Last Name'];\r\n      \r\n      for (const column of nameColumns) {\r\n        if (Object.prototype.hasOwnProperty.call(row, column)) {\r\n          const value = row[column];\r\n          \r\n          // Skip empty values\r\n          if (!value || value.trim() === '') continue;\r\n          \r\n          const nameInfo = await validateIndianName(value);\r\n          \r\n          if (!nameInfo.isValid) {\r\n            anomalies.push({\r\n              row: i + 1,\r\n              column: column,\r\n              value: value,\r\n              message: nameInfo.message || 'The value is potentially not a valid Indian name.',\r\n              suggestion: nameInfo.suggestion || '',\r\n            });\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return {anomalies};\r\n  }\r\n);\r\n"],"names":[],"mappings":"AAAA,mCAAmC;;;;;;AAInC;AACA;AACA;AAAA;;;;;;;AAEA,MAAM,qCAAqC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAClD,MAAM,uIAAA,CAAA,IAAC,CACJ,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,KACvB,QAAQ,CAAC;AACd;AAGA,MAAM,sCAAsC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACnD,WAAW,uIAAA,CAAA,IAAC,CAAC,KAAK,CAChB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACP,KAAK,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QACzB,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC5B,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC3B,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC7B,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAC7C;AAEJ;AAGO,eAAe,uCAAqB,GAArB,wBACpB,KAAmC;IAEnC,OAAO,4BAA4B;AACrC;AAEA,MAAM,8BAA8B,2HAAA,CAAA,KAAE,CAAC,UAAU,CAC/C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,YAAwD,EAAE;IAEhE,IAAK,IAAI,IAAI,GAAG,IAAI,MAAM,IAAI,CAAC,MAAM,EAAE,IAAK;QAC1C,MAAM,MAAM,MAAM,IAAI,CAAC,EAAE;QAEzB,0BAA0B;QAC1B,MAAM,cAAc;YAAC;YAAsB;SAAoB;QAE/D,KAAK,MAAM,UAAU,YAAa;YAChC,IAAI,OAAO,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,SAAS;gBACrD,MAAM,QAAQ,GAAG,CAAC,OAAO;gBAEzB,oBAAoB;gBACpB,IAAI,CAAC,SAAS,MAAM,IAAI,OAAO,IAAI;gBAEnC,MAAM,WAAW,MAAM,CAAA,GAAA,8IAAA,CAAA,qBAAkB,AAAD,EAAE;gBAE1C,IAAI,CAAC,SAAS,OAAO,EAAE;oBACrB,UAAU,IAAI,CAAC;wBACb,KAAK,IAAI;wBACT,QAAQ;wBACR,OAAO;wBACP,SAAS,SAAS,OAAO,IAAI;wBAC7B,YAAY,SAAS,UAAU,IAAI;oBACrC;gBACF;YACF;QACF;IACF;IAEA,OAAO;QAAC;IAAS;AACnB;;;IA5CoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 409, "column": 0}, "map": {"version":3,"sources":["file://D%3A/00_WorkSpace/Hackathon/h4b_online2/name_corrector/src/ai/flows/provide-data-audit-summary.ts"],"sourcesContent":["'use server';\r\n/**\r\n * @fileOverview Summarizes potential data quality issues after an audit.\r\n *\r\n * - provideDataAuditSummary - A function that provides a textual summary of potential data issues.\r\n * - ProvideDataAuditSummaryInput - The input type for the provideDataAuditSummary function.\r\n * - ProvideDataAuditSummaryOutput - The return type for the provideDataAuditSummary function.\r\n */\r\n\r\nimport {ai} from '@/ai/ai-instance';\r\nimport {z} from 'genkit';\r\n\r\nconst ProvideDataAuditSummaryInputSchema = z.object({\r\n  auditResults: z.string().describe('The detailed results from the data audit.'),\r\n});\r\nexport type ProvideDataAuditSummaryInput = z.infer<typeof ProvideDataAuditSummaryInputSchema>;\r\n\r\nconst ProvideDataAuditSummaryOutputSchema = z.object({\r\n  summary: z.string().describe('A textual summary of the potential data quality issues.'),\r\n});\r\nexport type ProvideDataAuditSummaryOutput = z.infer<typeof ProvideDataAuditSummaryOutputSchema>;\r\n\r\nexport async function provideDataAuditSummary(input: ProvideDataAuditSummaryInput): Promise<ProvideDataAuditSummaryOutput> {\r\n  return provideDataAuditSummaryFlow(input);\r\n}\r\n\r\nconst prompt = ai.definePrompt({\r\n  name: 'provideDataAuditSummaryPrompt',\r\n  input: {\r\n    schema: z.object({\r\n      auditResults: z.string().describe('The detailed results from the data audit.'),\r\n    }),\r\n  },\r\n  output: {\r\n    schema: z.object({\r\n      summary: z.string().describe('A textual summary of the potential data quality issues.'),\r\n    }),\r\n  },\r\n  prompt: `You are an AI assistant who summarizes data audit results.\r\n\r\n  Given the following data audit results, provide a concise textual summary of the potential data quality issues identified. Focus on the key findings and potential implications for data accuracy and reliability.\r\n  \\n  Audit Results: {{{auditResults}}}\r\n  \\n  Summary: `,\r\n});\r\n\r\nconst provideDataAuditSummaryFlow = ai.defineFlow<\r\n  typeof ProvideDataAuditSummaryInputSchema,\r\n  typeof ProvideDataAuditSummaryOutputSchema\r\n>(\r\n  {\r\n    name: 'provideDataAuditSummaryFlow',\r\n    inputSchema: ProvideDataAuditSummaryInputSchema,\r\n    outputSchema: ProvideDataAuditSummaryOutputSchema,\r\n  },\r\n  async input => {\r\n    const {output} = await prompt(input);\r\n    return output!;\r\n  }\r\n);\r\n"],"names":[],"mappings":";;;;;AACA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,qCAAqC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAClD,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACpC;AAGA,MAAM,sCAAsC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACnD,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC/B;AAGO,eAAe,uCAAqB,GAArB,wBAAwB,KAAmC;IAC/E,OAAO,4BAA4B;AACrC;AAEA,MAAM,SAAS,2HAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QACL,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YACf,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QACpC;IACF;IACA,QAAQ;QACN,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YACf,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC/B;IACF;IACA,QAAQ,CAAC;;;;eAII,CAAC;AAChB;AAEA,MAAM,8BAA8B,2HAAA,CAAA,KAAE,CAAC,UAAU,CAI/C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IAnCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 474, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 536, "column": 0}, "map": {"version":3,"sources":["file://D%3A/00_WorkSpace/Hackathon/h4b_online2/name_corrector/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 550, "column": 0}, "map": {"version":3,"sources":["file://D%3A/00_WorkSpace/Hackathon/h4b_online2/name_corrector/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgQ,GAC7R,8BACA","debugId":null}},
    {"offset": {"line": 564, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}